#!/usr/bin/env node
// Generated by LiveScript 1.3.1
var ref$, map, join, Promise, request, filesize, ProgressBar, _s, inquirer, argv, path, nodePutio, requestAsync, putio, downloadFiles;
ref$ = require('prelude-ls'), map = ref$.map, join = ref$.join;
Promise = require('bluebird');
request = require('request');
filesize = require('filesize');
ProgressBar = require('progress');
_s = require('underscore.string');
inquirer = require('inquirer');
argv = require('yargs').argv;
path = require('path');
nodePutio = require('node-putio');
requestAsync = Promise.promisify(request);
putio = nodePutio(process.env.PUTIO_ACCESS_TOKEN);
downloadFiles = function(putioEntries){
  var progressBar, onProgress;
  onProgress = function(evt){
    var log;
    progressBar || (progressBar = new ProgressBar('[:bar] :percent :etas :log', {
      complete: '=',
      incomplete: ' ',
      width: 25,
      total: evt.total
    }));
    log = filesize(evt.downloaded) + "/" + filesize(evt.total) + " " + filesize(evt.speed) + "/s";
    log += "\t" + (evt.fileNum + 1) + "/" + evt.filesTotal + "\t" + _s.truncate(evt.putioFile.path, 50);
    return progressBar.tick(evt.chunkSize, {
      log: log
    });
  };
  return putio.download(putioEntries, {
    onProgress: onProgress
  }).then(function(){
    if (!argv.k) {
      return putio('POST', 'files/delete', {
        file_ids: join(',')(
        map(function(it){
          return it.id;
        }, putioEntries))
      });
    }
  });
};
putio.fetchPutioEntry().then(function(putioFiles){
  var choices, res$, i$, len$, value, file, type, questions;
  res$ = [];
  for (i$ = 0, len$ = putioFiles.length; i$ < len$; ++i$) {
    value = i$;
    file = putioFiles[i$];
    type = file.isDirectory ? 'd' : '';
    res$.push({
      value: value,
      name: type + " " + file.name
    });
  }
  choices = res$;
  if (argv.a) {
    return downloadFiles(putioFiles);
  } else if (argv._.length) {
    return downloadFiles(
    map(function(it){
      return putioFiles[it];
    })(
    map(parseInt)(
    argv._)));
  } else {
    questions = {
      type: 'checkbox',
      name: 'files',
      message: 'which files',
      choices: choices,
      paginated: true
    };
    return inquirer.prompt(questions, function(answers){
      var files;
      files = map(function(it){
        return putioFiles[it];
      }, answers.files);
      return downloadFiles(files);
    });
  }
});
