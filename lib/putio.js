// Generated by LiveScript 1.3.1
var map, request, Promise, downloader, requestAsync, BASEURL;
map = require('prelude-ls').map;
request = require('request');
Promise = require('bluebird');
downloader = require('./downloader');
requestAsync = Promise.promisify(request);
BASEURL = "https://api.put.io/v2";
module.exports = function(accessToken){
  var getRequestArgs, putio, uploadTorrent, fetchPutioEntry;
  getRequestArgs = function(method, path, putioArgs){
    var args;
    putioArgs == null && (putioArgs = {});
    args = {
      method: method,
      json: true,
      uri: BASEURL + "/" + path,
      headers: {
        accept: 'application/json'
      }
    };
    putioArgs.oauth_token = accessToken;
    if (method === 'GET') {
      args.qs = putioArgs;
    } else {
      args.form = putioArgs;
    }
    return args;
  };
  putio = function(){
    return requestAsync(getRequestArgs.apply(null, arguments)).spread(function(resp, content){
      if (content.status === 'ERROR') {
        throw new Error(content.error_message);
      } else {
        return content;
      }
    });
  };
  uploadTorrent = function(torrentBuf, filename){
    var args;
    args = {
      method: 'POST',
      uri: BASEURL.replace(/api./, 'upload.') + "/files/upload",
      json: true,
      qs: {
        oauth_token: accessToken
      },
      formData: {
        file: {
          value: torrentBuf,
          options: {
            filename: "file.torrent",
            contentType: 'application/x-bittorrent'
          }
        }
      }
    };
    if (filename) {
      args.formData.filename = filename;
    }
    return requestAsync(args).spread(function(resp, body){
      return body.transfer;
    });
  };
  fetchPutioEntry = function(entry){
    if (entry === null || entry.isDirectory) {
      return putio('GET', 'files/list', {
        parent_id: entry != null ? entry.id : void 8
      }).then(function(arg$){
        var files, entries, ref$, dirs;
        files = arg$.files;
        entries = map(function(it){
          var path;
          path = "";
          if (entry) {
            path = entry.path + "/";
          }
          path += it.name.replace('/', '-');
          return {
            id: it.id,
            size: it.size,
            name: it.name,
            path: path,
            isDirectory: it.content_type === 'application/x-directory'
          };
        })(
        files);
        if (entry) {
          ref$ = partition(function(it){
            return it.isDirectory;
          })(
          entries), dirs = ref$[0], files = ref$[1];
          return Promise.map(dirs, fetchPutioEntry).then((function(it){
            return it.concat(files);
          }));
        } else {
          return entries;
        }
      });
    } else {
      return Promise.resolve([entry]);
    }
  };
  return putio.fetchPutioEntry = fetchPutioEntry, putio.uploadTorrent = uploadTorrent, putio.download = downloader(getRequestArgs, fetchPutioEntry), putio;
};