// Generated by LiveScript 1.3.1
var ref$, map, sum, flatten, request, Promise, path, bandwidthMonitor, fs, mkdirp;
ref$ = require('prelude-ls'), map = ref$.map, sum = ref$.sum, flatten = ref$.flatten;
request = require('request');
Promise = require('bluebird');
path = require('path');
bandwidthMonitor = require('./bandwidth-monitor');
fs = Promise.promisifyAll(require('fs'));
mkdirp = Promise.promisifyAll(require('mkdirp'));
module.exports = curry$(function(getRequestArgs, fetchPutioEntry, putioEntries, opts){
  var fileNum, downloadPutioFile;
  opts == null && (opts = {});
  opts.path || (opts.path = process.cwd());
  fileNum = 0;
  downloadPutioFile = curry$(function(bw, filesTotal, putioFile){
    return mkdirp.mkdirpAsync(path.join(opts.path, path.dirname(putioFile.path)))['catch'](function(){}).then(function(){
      var logEvent;
      logEvent = {
        fileNum: fileNum,
        filesTotal: filesTotal,
        putioFile: putioFile,
        total: bw.total
      };
      return new Promise(function(resolved, rejected){
        var args, onError;
        args = getRequestArgs('GET', "files/" + putioFile.id + "/download");
        onError = function(err){
          return fs.unlinkAsync(putioFile.path).then(function(){
            return rejected(err);
          });
        };
        return request(args).on('data', function(buf){
          var ref$;
          bw.tick(buf.length);
          return typeof opts.onProgress == 'function' ? opts.onProgress(import$((ref$ = {
            chunkSize: buf.length
          }, ref$.downloaded = bw.downloaded, ref$.speed = bw.speed, ref$.total = bw.total, ref$), logEvent)) : void 8;
        }).on('end', resolved).on('response', function(resp){
          if (resp.code >= 400) {
            return onError(resp);
          }
        }).on('error', onError).pipe(fs.createWriteStream(putioFile.path));
      })['finally'](function(){
        return fileNum += 1;
      });
    });
  });
  return Promise.map(putioEntries, fetchPutioEntry).then(flatten).then(function(files){
    var totalSize, left, bw;
    totalSize = left = sum(
    map(function(it){
      return it.size;
    })(
    files));
    bw = bandwidthMonitor(totalSize);
    return Promise.map(files, downloadPutioFile(bw, files.length), {
      concurrency: 4
    })['finally'](function(){
      return bw.stop();
    });
  });
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}